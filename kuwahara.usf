#pragma once
const int radius = 6;
float n = float(radius * radius);
float3 zero = float3(0, 0, 0);
float3 mean[4] = {zero, zero, zero, zero};
float3 var[4] = {zero, zero, zero, zero};
int l = radius - 1;
float2 uv = GetDefaultSceneTextureUV(Parameters, 14);
//Screen Size
float2 TexelSize = View.ViewSizeAndInvSize.zw;
// Bottom Left Sub-Grid
int y = 0;
int x = 0;
float3 pix;
for (y = (-1*l); y <= 0; y++) {
  for (x = (-1*l); x <= 0; x++) {
    float2 offset = float2(x,y)*TexelSize;
    pix = SceneTextureLookup(uv + offset,14,false).rgb;
    mean[0] += pix;
    var[0] += pix*pix;
  }
}

//Bottom Right Sub-Grid
for (y = (-1*l); y <= 0; y++) {
  for (x = l; x >= 0; x--) {
    float2 offset = float2(x,y)*TexelSize;
    pix = SceneTextureLookup(uv + offset,14,false).rgb;
    mean[1] += pix;
    var[1] += pix*pix;
  }
}

//Top Left Sub-Grid
for (y = l; y >= 0; y--) {
  for (x = (-1*l); x <= 0; x++) {
    float2 offset = float2(x,y)*TexelSize;
    pix = SceneTextureLookup(uv + offset,14,false).rgb;
    mean[2] += pix;
    var[2] += pix*pix;
  }
}

//Top Right Sub-Grid
for (y = l; y >= 0; y--) {
  for (x = l; x >= 0; x--) {
    float2 offset = float2(x,y)*TexelSize;
    pix = SceneTextureLookup(uv + offset,14,false).rgb;
    mean[3] += pix;
    var[3] += pix*pix;
  }
}

// Selecting Correct Pixel Based on Lowest Variance
float min_var = 1e+4;
float3 color;
for (int i = 0; i < 4; i++) {
  mean[i] /= n;
  float3 variance = abs((var[i]/n) - (mean[i]*mean[i]));
  float v = variance.r + variance.g + variance.b;
  if (v < min_var) {
    min_var = v;
    color = mean[i];
  }
}
//generating random canvas texture
struct RandomNumber {
  float random(float2 input) {
    float2 K1 = float2(
      23.14069263277926, // e^pi (Gelfond's constant)
      2.665144142690225 // 2^sqrt(2) (Gelfondâ€“Schneider constant)
    );
    return frac(cos(dot(input,K1)) * 12345.6789);
  }
};
RandomNumber r;
float random_x = r.random(float2(camera_pos.x*camera_pos.y ,camera_pos.x*camera_pos.z));
float random_y = r.random(float2(camera_pos.y*camera_pos.z,camera_pos.y*camera_pos.x));
float3 canvas_texture_color = Texture2DSample(Tex, TexSampler, float2(random_x,random_y));
// Output Correct Color
return color*canvas_texture_color;
