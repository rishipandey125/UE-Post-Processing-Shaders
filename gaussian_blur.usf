#pragma once
//grayscale->blur->canny
struct GaussianBlurHelpers {
  // float float3 pixel) {
  //   return (pixel.r + pixel.g + pixel.b) / 3.0;
  // }
  float gaussian_blur_convolution(float3 row1, float3 row2, float3 row3) {
      float3 filter1 = float3(1.0,2.0,1.0);
      float3 filter2 = float3(2.0,4.0,1.0);
      float3 filter3 = float3(1.0,2.0,1.0);
      return dot(filter1,row1) + dot(filter2,row2) + dot(filter3,row3);
  }

  float3 gaussian_blur(float2 uv, float2 TexelSize) {
    // UV coordinates based on Layout
    // A B C
    // D X E
    // F G H
    // float A = SceneTextureLookup((float2(-1,1)*TexelSize) + uv,25,false).rgb);
    // float B = SceneTextureLookup((float2(0,1)*TexelSize) + uv,25,false).rgb);
    // float C = SceneTextureLookup((float2(1,1)*TexelSize) + uv,25,false).rgb);
    // float D = SceneTextureLookup((float2(-1,0)*TexelSize) + uv,25,false).rgb);
    // float X = SceneTextureLookup(uv,25,false).rgb);
    // float E = SceneTextureLookup((float2(1,0)*TexelSize) + uv,25,false).rgb);
    // float F = SceneTextureLookup((float2(-1,-1)*TexelSize) + uv,25,false).rgb);
    // float G = SceneTextureLookup((float2(0,-1)*TexelSize) + uv,25,false).rgb);
    // float H = SceneTextureLookup((float2(1,-1)*TexelSize) + uv,25,false).rgb);
    float3 A = SceneTextureLookup((float2(-1,1)*TexelSize) + uv,25,false).rgb;
    float3 B = SceneTextureLookup((float2(0,1)*TexelSize) + uv,25,false).rgb;
    float3 C = SceneTextureLookup((float2(1,1)*TexelSize) + uv,25,false).rgb;
    float3 D = SceneTextureLookup((float2(-1,0)*TexelSize) + uv,25,false).rgb);
    float3 X = SceneTextureLookup(uv,25,false).rgb;
    float3 E = SceneTextureLookup((float2(1,0)*TexelSize) + uv,25,false).rgb;
    float3 F = SceneTextureLookup((float2(-1,-1)*TexelSize) + uv,25,false).rgb;
    float3 G = SceneTextureLookup((float2(0,-1)*TexelSize) + uv,25,false).rgb;
    float3 H = SceneTextureLookup((float2(1,-1)*TexelSize) + uv,25,false).rgb;
    //weighted avg so that you don't lighten or darken a pixel
    float blurred_pixel_r = gaussian_blur_convolution(float3(A.r,B.r,C.r),float3(D.r,X.r,E.r),float3(F.r,G.r,H.r))/9.0;
    float blurred_pixel_g = gaussian_blur_convolution(float3(A.g,B.g,C.g),float3(D.g,X.g,E.g),float3(F.g,G.g,H.g))/9.0;
    float blurred_pixel_b = gaussian_blur_convolution(float3(A.b,B.b,C.b),float3(D.b,X.b,E.b),float3(F.b,G.b,H.b))/9.0;

    return float3(blurred_pixel_r,blurred_pixel_g,blurred_pixel_b);
  }
}; GaussianBlurHelpers g_b;

float stencilIndex = 1;
float2 uv = GetDefaultSceneTextureUV(Parameters,14);
if (SceneTextureLookup(uv,25,false).r == stencilIndex) {
  float2 TexelSize = View.ViewSizeAndInvSize.zw;
  return g_b.gaussian_blur(uv,TexelSize);
}
return float3(0.0,0.0,0.0);
